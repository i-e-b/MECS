
// Loop and compare
set(i 10)
while ( not-equal(i 0)
    if ( %(i)
        print(i)
    )
    set(i -(i 1))
)


// Simple example of evaluation
eval("print('Hello, world from eval') print('This is a program inside a program')")

// Recursive eval. Don't really do this!
eval("eval(\"print('Hello, world from evalception')\")")

// 'Call' functionality
set(i "print")
call(i "Hello, world from call") // call print by name
unset(i)


// function defs
def (
    timesTwo (x) (
        return( *(2 x) )
    )
)
def (
    meaning? () (
        print("42")
    )
)

// showing that return restrictions only count if you return *a value*
def (
    ok!(x) (
        if ( x
            print("You said true")
            return()                // no value returned, so it's ok that not all paths have a return.
        )
        print("You said false")
    )
)

print(timesTwo(4)) // "8"
meaning?()         // "42"
ok!(false)         // "You said false"

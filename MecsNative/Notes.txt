Components to do:
=================

Code niceties
-------------

* [ ] change 'deallocate' functions to `...Deallocate(thing** x){ ... *x = NULL ...}`
* [ ] add typedefinition to container registration (e.g. `VectorPop(VectorPtr_MyType v)`)


Language features
-----------------

* [x] General vector
* [x] Vector macros
* [x] Hash map for pointer types
* [x] Dictionary for simple types
* [x] Tree structure
* [x] Macros for hash map
* [x] Macros for tree
* [x] Mutable string (Vector of char + manipulation tools -- including hashing)
* [x] Change all structs to use anon types (move alloc to pointer return)
* [x] Queue: Dequeue (enqueue == push). (Could do 'push-left' at some point)
* [x] Add optimised sorting to vector
* [x] Fixed point real? (imported)
* [x] Bring heap in from scan-line experiments (and generalise)
* [x] Tagged data format reader for 32-bit cpu
* [x] String-to-num parsing
* [x] Allow containers to have a target Arena embedded into them (optional)
* [x] Extend numeric types (use 56 bits of params+data for truncated `double`?)

* [x] Extended data types (vector and hash)
    * [x] Vector datatype
    * [x] Hash datatype (always string-><any>)
* [x] Deep-serialise a tag from runtime
  * [x] De-serialise into an arena (the original OR not the original)

* [x] Nice syntax for deconstructing deep maps and lists
  * [x] Extend the `()` function to take parameters and decompose
  * [x] Fix param counting for `()` with params -- it should not be counted.
* [x] Var-as-func truthyness for map keys

Input handling:
---------------

* [x] File system abstraction
* [x] Improve filesystem to allow non-byte sized vectors?
* [ ] Hunt down and fix compiler and parser leaks (relatively low priority)
  * [ ] improve / re-write the tree container (2-list generalised graph?)
* [x] Convert parser
* [x] Convert compiler
  * [x] tag code write
  * [x] scope (vector of hashmaps)
  * [x] context
  * [x] desugar
  * [x] optimisations
  * [x] symbol output (for debug)
    * [ ] line to tag-code mapping

The machine:
------------

* [ ] Graphics (native / win split)
  * [x] Scrolling console (optimise scroll and dirty regions for this)
  * [x] Move `cout` calls in "MecsNative.cpp" to new console
  * [ ] keyboard input
    * [ ] stdin console buffer
    * [x] keyboard events for MECS code
  * [ ] message handler for graphics
  * [ ] Syntax hiliting editor (caret in the parser and extended AST)

* [x] Put ALL Interpreter allocations inside it's own memory
* [x] Add readline / readkey support
* [x] Performance optimise
  * [x] Special hashmap for scope (like the c# side uses); use array rather than vector.
* [ ] Tail-recursion support (maybe with counting return stack?)
* [x] TagCode reader (fix byte order)
* [x] Convert runtime
  * [ ] Add breakpoints
* [x] Add IPC in/out (vector of strings, or special serialised format -- see Message queues below)
* [x] Debug symbols file and reader
* [ ] Value stack improvements (delete unused return values. Maybe have a sentinel value, or single stack)


Actor model stuff:
------------------

* [x] Arenas (once implemented, wrap the parser, compiler, etc in arena allocater to ensure complete cleanup)
    * [x] Remove stdlib malloc/free and replace
    * [x] Fix arena/zone naming consistency in the allocator code
    * [x] Per-instance arenas for containers? (so we can be thread safe-ish)
* [x] Serialisation & hashing (will help escape arenas)
* [x] Message queues
    * [x] multiple available interpreter sessions with sequencer
	    * [ ] could load balance between cores based on idle time
    * [x] `send`, `listen` and `wait` built-in functions with target on send and register.
	* [x] routing/mapping/storage between interpreter sessions (maybe a hash-map per interpreter state?)
* [ ] Special message receivers
	* [ ] Graphics
	* [ ] Storage (disk)
* [ ] Special message sender
	* [x] Keyboard
	* [ ] Animation frames
* [ ] Scheduler
  * [ ]      start new process -- maybe by sending a specific message? (`send("start" "myprog.ecs")`) or a new built-in (`run:("myprog.ecs")`)
  * [ ] -OR- have a scheduler script that starts up multiple programs.
* [x] Make sure all allocations for interpreter are inside its own memory space
  * [ ] Suspend & resume (including suspend-to-disk)
  * [ ] Try using suspend/resume for garbage collection?

Garbage collector / Memory:
---------------------------

* [ ] Look at removing the "Memory Manager" and making all arena use in the C code explicit.


Might want to use a 'copy' GC, to move referenced stuff to a new arena on memory pressure.
This would save us from having to track anything.
Could also have a 'fallback' mode keeping 2 scopes at once to avoid stop-the-world.

* [-] ~periodically look for 'potential garbage' names in the running scope. If not found, deallocate~
* [-] ~extend 'potential garbage' to hold a list instead of single refs~
* [ ] ensure all allocated objects go into the scope (i.e. child data of complex types. Should get a hidden unique name?)
* [ ] maybe have 'destroy&recreate' for actors?
* [ ] Avoid stop-the-world where possible.
